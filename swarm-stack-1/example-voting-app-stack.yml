#
# It is the same architecture used on "/swarm-app-1"
#

#
# It must have version >= 3
#
version: "3"
services:

  #
  # Definition of our Redis service
  #
  redis:
    image: redis:alpine
    ports:
      - "6379"
    networks:
      - frontend
    deploy:
      replicas: 1

      #
      # Here we specify what happens when we run "stack update".
      #
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure

  #
  # Important: For the "db", we specify to deploy "only on" "Manager nodes".
  #
  db:
    image: postgres:9.4
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - backend
    deploy:
      placement:
        constraints: [node.role == manager]
  vote:
    image: dockersamples/examplevotingapp_vote:before
    ports:
      - 5000:80
    networks:
      - frontend
    depends_on:
      - redis
    deploy:
      replicas: 2
      #
      # Here we specify what happens when we run "stack update".
      #
      update_config:
        parallelism: 2
      restart_policy:
        condition: on-failure
  result:
    image: dockersamples/examplevotingapp_result:before
    ports:
      - 5001:80
    networks:
      - backend
    depends_on:
      - db
    deploy:
      replicas: 1
      #
      # Here we specify what happens when we run "stack update".
      #
      update_config:
        parallelism: 2
        delay: 10s
      #
      # We define when to "restart" the container. In this case, whem it fails.
      #
      restart_policy:
        condition: on-failure

  worker:
    image: dockersamples/examplevotingapp_worker
    networks:
      - frontend
      - backend
    deploy:
      mode: replicated
      replicas: 1
      labels: [APP=VOTING]
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      placement:
        constraints: [node.role == manager]

  visualizer:
    image: dockersamples/visualizer
    ports:
      - "8080:8080"
    stop_grace_period: 1m30s
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]

networks:
  frontend:
  backend:

volumes:
  db-data:
